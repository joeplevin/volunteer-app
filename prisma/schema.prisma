generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  role          String
  emailVerified DateTime?
  phone         String
  image         String?
  accounts      Account[]
  sessions      Session[]
  charity       Charity?  @relation(fields: [charityId], references: [id])
  charityId     String?
  Student       Student?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Charity {
  id                 String        @id @default(cuid())
  users              User[]
  Jobs               Job[]
  Certificates       Certificate[]
  charityName        String
  charityDescription String
  charityLocation    String
  charityWebsite     String
}

model Certificate {
  id          String   @id @default(cuid())
  title       String
  description String
  charityId   String // Change to Charity's primary key type
  charity     Charity  @relation(fields: [charityId], references: [id])
  studentId   String
  student     Student? @relation(fields: [studentId], references: [id])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  completed   Boolean
  progress    String
  charityId   String // Change to Charity's primary key type
  charity     Charity  @relation(fields: [charityId], references: [id])
  studentId   String?
  student     Student? @relation(fields: [studentId], references: [id])
}

model Student {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  Cv           Cv?
  Jobs         Job[]
  Certificates Certificate[]
}

model Cv {
  id        String     @id @default(cuid())
  cvUrl     String
  studentId String     @unique
  student   Student    @relation(fields: [studentId], references: [id])
  CvSkills  CvSkills[]
}

model CvSkills {
  id    String @id @default(cuid())
  skill String
  cvId  String
  cv    Cv     @relation(fields: [cvId], references: [id])
}
